#!/bin/bash
# -*- scheme -*-
# wl07 - wayland client in fibers
# telnet localhost 37146

LD_LIBRARY_PATH=`pwd`:$LD_LIBRARY_PATH
export LD_LIBRARY_PATH

NYACC_DIR=$HOME/repo/sv/nyacc/nyacc-rel/nyacc-1.08
GUILE_LOAD_PATH=$NYACC_DIR/examples:$NYACC_DIR/module
GUILE_LOAD_PATH=`pwd`:$GUILE_LOAD_PATH
export GUILE_LOAD_PATH

#exec gdb --args guile $0
exec guile $0
!#
;; Copyright (C) 2022 Matthew Wette
;;
;; This library is free software; you can redistribute it and/or
;; modify it under the terms of the GNU Lesser General Public
;; License as published by the Free Software Foundation; either
;; version 3 of the License, or (at your option) any later version.
;;
;; This library is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;; Lesser General Public License for more details.
;;
;; You should have received a copy of the GNU Lesser General Public License
;; along with this library; if not, see <http://www.gnu.org/licenses/>.

;; TODO
;; 1 add a layer somehow to callers don't need to pass rq-iobuf 0
;;   need a way to block the sender until a number of messages have
;;   built up
;; 2 figure out how to really use kernel polling so guile doesn't
;;   run at 100% all the time

(use-modules (rnrs bytevectors))
(use-modules (system foreign))
(use-modules (ice-9 atomic))

(use-modules (wl-client))
(use-modules (sockmsg))

(use-modules (ice-9 pretty-print))
(define (sferr fmt . args) (apply simple-format (current-error-port) fmt args))
(define (pperr exp) (pretty-print exp (current-error-port)))

;; ============================================================================

#|

;; drm_magic_g -> unsigned-int
;; drm_auth_t -> struct { drm_magic_t magic; }
;;(define (get-drm-magic fd)
;;  (let ((magic )

(define ioctl
  (let ((f (pointer->procedure
            int
            (dynamic-func "ioctl" (dynamic-link))
            (list int unsigned-long '*))))
    (lambda (fd request addr)
      (f fd request addr))))

(define (get-drm-auth fd) ;; =>
  (let* ((szof (ffi:sizeof unsigned-long))
         (temp (make-bytevector szof))
         (addr (bytevector->pointer temp)))
    (ioctl fd DRM_IOCTL_GET_MAGIC (bytevector->pointer temp))
    (ioctl fd DRM_IOCTL_AUTH_MAGIC (bytevector->pointer temp))
    (case szof
      ((4) (bytevector-i32-native-ref temp 0))
      ((8) (bytevector-i64-native-ref temp 0))
      (else (error "setup-drm")))))
|#     

;; ============================================================================

(define sys-sleep sleep)

(use-modules ((fibers) #:renamer (lambda (s) (if (eq? s 'sleep) 'fsleep s))))
(use-modules (fibers scheduler))
(use-modules (fibers conditions))
(use-modules (fibers channels))

(use-modules (system repl server))
(use-modules (system repl coop-server))

(define (make-counter init)
  (let ((box (make-atomic-box init)))
    (case-lambda
      (() (let loop ((exp (atomic-box-ref box)))
            (let* ((cur (atomic-box-compare-and-swap! box exp (1+ exp))))
              (if (eq? cur exp) cur (loop (atomic-box-ref box))))))
      ((val) (atomic-box-set! box val)))))

;; ============================================================================

;; per-interface vectors of handlers by opcode
(define my-handler-vec-vec (make-wl-handler-vec-vec))

;; number of objects 
;;(define *obj-count* (make-parameter 0))
(define *obj-count* (make-counter 0))
(define (obj-count++) (*obj-count*))

;; name -> id
(define object-dict (make-hash-table 97))

;; vector of object-id => ref into wl-decoder-vec (decoder by opcode)
(define object-decoders-vec (make-vector 1000))

;; vector of object-id => ref into wl-handler-vec (handler by opcode)
(define object-handlers-vec (make-vector 1000))

;; vector of objec-id => user-defined value
(define object-value-vec (make-vector 1000))

;; pre-defined object ids
(define null-id 0)
(define display-id 1)
(define registry-id 2)

;; interface-name => #(name interface version)
(define registry (make-hash-table))

(define (set-object-handler obj-id obj-name)
  (let* ((ob-indx obj-id)
         (ob-name (if (string? obj-name) (string->symbol obj-name) obj-name))
         (if-indx (assq-ref wl-index-dict ob-name))
         (if-decoders (vector-ref wl-decoder-vec-vec if-indx))
         (if-handlers (vector-ref my-handler-vec-vec if-indx)))
    (vector-set! object-decoders-vec ob-indx if-decoders)
    (vector-set! object-handlers-vec ob-indx if-handlers)))

;; set-event-handler 'wl_displaly 'get_registry proc => prev-proc
(define (set-event-handler interface event proc)
  (let* ((if-indx (assq-ref wl-index-dict interface))
         (opcode (assq-ref (vector-ref wl-opcode-dict-vec if-indx) event))
         (if-handlers (vector-ref my-handler-vec-vec if-indx))
         (evt-handler (vector-ref if-handlers opcode)))
    (vector-set! if-handlers opcode proc)
    evt-handler))

(define (dispatch obj-id opcode bv ix cm)
  (let* ((dec-vec (vector-ref object-decoders-vec obj-id))
         (decoder (and (vector-ref dec-vec opcode)))
         (hlr-vec (vector-ref object-handlers-vec obj-id))
         (handler (and (vector-ref hlr-vec opcode))))
    (if (and decoder handler)
        (call-with-values (lambda () (decoder obj-id bv ix cm)) handler)
        (begin
          (sferr "dispatch: missing decoder or handler: id=~S op=~S\n"
                 obj-id opcode)
          (sferr "  dec-vec?=~S decoder?=~S hlr-vec?=~S handler?=~S\n"
                 (and dec-vec #t) (and decoder #t)
                 (and hlr-vec #t) (and handler #t))))))

;; ====================================

(define rq-chan #f)                     ; channel for issuing requests
(define rq-iobuf #f)
(define ev-iobuf #f)

;; --- wl_display

(define (wl_display:sync obj-id callback)
  (put-message rq-chan
    (lambda () (encode-wl_display:sync obj-id rq-iobuf 0 callback))))

(define (wl_display:get_registry obj-id registry)
  (put-message rq-chan
    (lambda () (encode-wl_display:get_registry obj-id rq-iobuf 0 registry))))

;; wl_display:error
(define (handle-wl_display:error obj-id object_id code message)
  (sferr "display-error: id=~S code=~S msg=~S\n" object_id code message))

;; wl_display:delete_id
(define (handle-wl_display:delete_id obj-id id)
  (sferr "delete-id: ~S\n" id))

;; --- wl_registry

(define globals '())

(define (my-bind interface)
  (let* ((info (hash-ref registry interface))
         (name (vector-ref info 0))
         (version (vector-ref info 2))
         (my-id (obj-count++))
         (my-sy (string->symbol interface)))
    (sferr "my-bind ~S: name=~S version=~S my-id=~S\n"
           interface name version my-id)
    (hashq-set! object-dict my-sy my-id)
    (set-object-handler my-id my-sy)
    (put-message rq-chan
      (lambda ()
        (encode-wl_registry:bind
          registry-id rq-iobuf 0 name interface version my-id)))))

(define (handle-wl_registry:global obj-id name interface version)
  ;; uint string uint
  ;;(sferr "global: name=~S interface=~S version=~S\n" name interface version)
  (set! globals (cons interface globals))
  (hash-set! registry interface (vector name interface version)))

(define (handle-wl_registry:global_remove obj-id name)
  (sferr "global_removed: ~S\n" name))

#|
;; --- wl_shm_pool

(define (wl_shm_pool:create_buffer id offset width height stride format)
  (put-message rq-chan
    (lambda ()
      (encode-wl_shm_pool:create_buffer
       shm-pool-id rq-iobuf 0 id offset width height stride format))))

;; wl_shm_pool::destroy
;; wl_shm_pool::resize
|#

;; --- wl_shm

;; formats: argb8888 = 0, xrgb8888 = 1

(define (wl_shm:create_pool obj-id id fd size)
  (put-message rq-chan
    (lambda () (encode-wl_shm:create_pool obj-id rq-iobuf 0 id fd size))))

;; informs of allowed formats
(define formats '())

(define (handle-wl_shm:format obj-id format)
  ;; format is uint enum format
  ;; (sferr "format ~A\n" format)
  (set! formats (cons format formats)))

;; --- wl_output

(define (handle-wl_output:geometry obj-id x y physical_width physical_height
                                   subpixel make model transform)
  (sferr "output::geometry called\n"))

(define (handle-wl_output:mode obj-id flags width height refresh)
  (sferr "output::mode called\n"))

(define (handle-wl_output:done . args)
  (sferr "output::done called\n"))
  
(define (handle-wl_output:scale . args)
  (sferr "output::scale called\n"))
  
(define (handle-wl_output:release . args)
  (sferr "output::release called\n"))
  
(define (handle-wl_output:name . args)
  (sferr "output::name called\n"))
  
(define (handle-wl_output:description . args)
  (sferr "output::description called\n"))
  
;; --- zwp_linux_dmabuf

(define (dmabuf:destroy obj-id)
  (put-message rq-chan
    (lambda ()
      (encode-zwp_linux_dmabuf_v1:destroy obj-id rq-iobuf 0))))
  
(define (dmabuf:create_params obj-id params_id)
  (put-message rq-chan
    (lambda ()
      (encode-zwp_linux_dmabuf_v1:create_params
       obj-id rq-iobuf 0 params_id))))

(define (handle-dmabuf:format obj-id name)
  (sferr "dmabuf:format called\n"))
  
(define (handle-dmabuf:modifier obj-id format modifier_hi modifier_lo)
  (sferr "dmabuf:modifier called\n"))
  
(define (dmabuf:get_default_feedback obj-id id)
  (put-message rq-chan
    (lambda ()
      (encode-zwp_linux_dmabuf_v1:get_default_feedback obj-id rq-iobuf 0 id))))
  
(define (dmabuf:get_surface_feedback obj-id id surface)
  (put-message rq-chan
    (lambda ()
      (encode-zwp_linux_dmabuf_v1:get_surface_feedback
       obj-id rq-iobuf 0 id surface))))
  
;; dmabuf-params

(define (dmabuf_params:destroy obj-id)
  (put-message rq-chan
    (lambda ()
      (encode-zwp_linux_buffer_params_v1:destroy obj-id rq-iobuf 0))))

(define (dmabuf_params:add obj-id fd plane_idx offset stride
                           modifier_hi modifier_lo)
  (put-message rq-chan
    (lambda ()
      (encode-zwp_linux_buffer_params_v1:add
       obj-id rq-iobuf 0 fd plane_idx offset stride modifier_hi modifier_lo))))

(define (dmabuf_params:create obj-id width height format flags)
  (put-message rq-chan
    (lambda ()
      (encode-zwp_linux_buffer_params_v1:create
       obj-id rq-iobuf 0 width height format flags))))

(define (handle-dmabuf_params:created obj-id buffer)
  (sferr "dmabuf_params:created called\n"))

(define (handle-dmabuf_params:failed obj-id)
  (sferr "dmabuf_params:failed called\n"))

(define (dmabuf_params:create_immed obj-id buffer_id width height format flags)
  (put-message rq-chan
    (lambda ()
      (encode-zwp_linux_buffer_params_v1:create_immed
       obj-id rq-iobuf 0 buffer_id width height format flags))))

;; === appl ===========================

(define guardian (make-guardian))
(define shm-fd #f)
(define shm-bv #f)

(define (install-handlers)
  (set-event-handler 'wl_display 'error handle-wl_display:error)
  (set-event-handler 'wl_display 'delete_id handle-wl_display:delete_id)

  (set-event-handler 'wl_registry 'global handle-wl_registry:global)
  (set-event-handler 'wl_registry 'global_remove
                     handle-wl_registry:global_remove)

  ;; compositor

  ;; drm

  (set-event-handler 'wl_shm 'format handle-wl_shm:format)

  (set-event-handler 'wl_output 'geometry handle-wl_output:geometry)
  (set-event-handler 'wl_output 'mode handle-wl_output:mode)
  (set-event-handler 'wl_output 'done handle-wl_output:done)
  (set-event-handler 'wl_output 'scale handle-wl_output:scale)
  (set-event-handler 'wl_output 'release handle-wl_output:release)
  (set-event-handler 'wl_output 'name handle-wl_output:name)
  (set-event-handler 'wl_output 'description handle-wl_output:description)

  (set-event-handler 'zwp_linux_dmabuf_v1 'format handle-dmabuf:format)
  (set-event-handler 'zwp_linux_dmabuf_v1 'modifier handle-dmabuf:modifier)

  (set-event-handler 'zwp_linux_buffer_params_v1 'created
                     handle-dmabuf_params:created)
  (set-event-handler 'zwp_linux_buffer_params_v1 'failed
                     handle-dmabuf_params:failed)

  ;; 0 is the null object; 1: wl_display
  (set-object-handler display-id 'wl_display)
  (set-object-handler registry-id 'wl_registry)
  
  (*obj-count* 3))

(define* (setup-buffer-pool #:optional (size #x1000000)) ;; def 16 MB
  (let* ((port (tmpfile))(fd (port->fdes port)))
    (guardian port)
    (set! shm-fd fd)
    (truncate-file fd size)
    (set! shm-bv (mmap 0 size (logior PROT_READ PROT_WRITE) MAP_SHARED fd 0))
    ;;(set! shm-pool-id (obj-count++))
    ;;(sferr "calling create_pool ~S ~S ~S\n" shm-pool-id fd size)
    ;;(wl_shm:create_pool shm-pool-id fd size)
    ))

;; === agents ========================

(define wl-sock #f)

(define socket-path
  (let ((dir (getenv "XDG_RUNTIME_DIR"))
	(dpy (getenv "WAYLAND_DISPLAY")))
    (and dir dpy (string-append dir "/" dpy))))

(define (connect-display)
  (let* ((path socket-path)
         (style (logior SOCK_STREAM SOCK_CLOEXEC))
         (sock (socket PF_UNIX style 0))
         (conn (connect sock AF_UNIX path)))
    ;;(setvbuf sock 'none)
    (fcntl sock F_SETFL (logior O_NONBLOCK (fcntl sock F_GETFL)))
    (set! rq-iobuf (make-bytevector 1024))
    (set! ev-iobuf (make-bytevector 1024))
    sock))

(define (sender)
  (sferr "sender starting ...\n")
  (let loop ((n-sent 0) (n-left 0) (cm #f) (rqq '()))
    (fsleep 0.01)
    (cond
     ((positive? n-left)
      (sferr "send message @~S\n" n-sent)
      (sferr " ~A\n" (fmtbv/x rq-iobuf n-sent n-left 4))
      (if cm (sferr " fd ~A\n" (dec-fd cm))
      (catch #t
        (lambda ()
          (let ((n (sendmsg wl-sock rq-iobuf n-sent n-left cm)))
            ;;(force-output wl-sock)
            (loop (+ n-sent n) (- n-left n) #f rqq)))
        (lambda (key . args) (sferr "sender error\n")))))
     ((pair? rqq)
      (call-with-values (car rqq) 
        (lambda (ln cm)
          (sferr "sending msg  ln ~S  cm ~S\n" ln cm)
          (loop 0 ln cm (cdr rqq)))))
     ((get-message rq-chan) =>
      (lambda (req)
        (loop n-sent n-left cm (cons req rqq))))
     (else
      (sferr "sender says wtf\n")))))

(define (receiver)
  (sferr "receiver starting ...\n")
  (let loop ((n-have 0) (object-id #f) (msg-size 8) (opcode #f) (control #f))
    (fsleep 0.01)
    ;;(sferr "n-have=~S  msg-size=~S\n" n-have msg-size)
    (cond
     ((< n-have msg-size)
      (catch 'system-error
        (lambda ()
          (let* ((res (recvmsg! wl-sock ev-iobuf n-have))
                 (n-read (vector-ref res 0))
                 (control (or control (vector-ref res 1)))
                 (flags (vector-ref res 2)))
            (when (zero? n-read) (fsleep 0.1)) ; SLEEP HERE
            (loop (+ n-have n-read) object-id msg-size opcode control)))
        (lambda (key . args) (sferr "receiver error\n"))))
     ((not object-id)
      (let* ((object-id (bytevector-u32-native-ref ev-iobuf 0))
             (word1 (bytevector-u32-native-ref ev-iobuf 4))
             (msg-size (bytevector-u16-native-ref ev-iobuf msg-size-offset))
             (opcode (bytevector-u16-native-ref ev-iobuf opcode-offset)))
        (loop n-have object-id msg-size opcode control)))
     (else
      ;;(sferr "dispatch ~S ~S\n" object-id opcode)
      (dispatch object-id opcode ev-iobuf 8 control)
      (if (> n-have msg-size)
          (bytevector-copy! ev-iobuf msg-size ev-iobuf 0 (- n-have msg-size)))
      (loop (- n-have msg-size) #f 8 opcode control)))))

(define (monitor)
  (sferr "monitor starting ...\n")
  (let* ((server (spawn-coop-repl-server)))
    (let loop ()
      (poll-coop-repl-server server)
      (yield-current-task)
      (fsleep 0.1)
      (loop))))

(define (get-registry)
  (wl_display:get_registry display-id registry-id))

(define done-cond #f)

(define (done)
  (and done-cond (signal-condition! done-cond)))

(run-fibers
 (lambda ()
   (set! wl-sock (connect-display))
   (set! done-cond (make-condition))
   (set! rq-chan (make-channel))
   (install-handlers)
   ;;
   (spawn-fiber receiver)
   (spawn-fiber sender)
   (get-registry) (fsleep 1)
   ;;
   (spawn-fiber monitor)
   (wait done-cond)
   (close-port wl-sock))
 #:hz 0 #:install-suspendable-ports? #f)

;; --- last line ---
