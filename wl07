#!/bin/bash
# -*- scheme -*-
# wl07 - roll in fibers ???

LD_LIBRARY_PATH=`pwd`:$LD_LIBRARY_PATH
export LD_LIBRARY_PATH

GUILE_LOAD_PATH=`pwd`:$GUILE_LOAD_PATH
export GUILE_LOAD_PATH

exec guile $0
!#

(use-modules (rnrs bytevectors))
(use-modules (system foreign))
(use-modules (ice-9 atomic))

(use-modules (wl-client))
(use-modules (sockmsg))

(use-modules (ice-9 pretty-print))
(define (sf fmt . args) (apply simple-format #t fmt args))
(define pp pretty-print)

(define (sferr fmt . args) (apply simple-format (current-error-port) fmt args))
(define (pperr exp) (pretty-print exp (current-error-port)))

;; ============================================================================

(define sys-sleep sleep)

(use-modules ((fibers) #:renamer (lambda (s) (if (eq? s 'sleep) 'fsleep s))))
(use-modules (fibers scheduler))
(use-modules (fibers conditions))
(use-modules (fibers channels))

;;(use-modules (ice-9 readline))
;;(use-modules (ice-9 top-repl))
(use-modules (system repl server))

(define (make-counter init)
  (let ((box (make-atomic-box init)))
    (case-lambda
      (() (let loop ((exp (atomic-box-ref box)))
            (let* ((cur (atomic-box-compare-and-swap! box exp (1+ exp))))
              (if (eq? cur exp) cur (loop (atomic-box-ref box))))))
      ((val) (atomic-box-set! box val)))))

;; ============================================================================

;; per-interface vectors of handlers by opcode
(define wl-handler-vec-vec (make-wl-handler-vec-vec))

;; number of objects 
;;(define *obj-count* (make-parameter 0))
(define *obj-count* (make-counter 0))
(define (obj-count++) (*obj-count*))

;; name -> id
(define object-dict (make-hash-table 97))

;; vector of object-id => ref into wl-handler-vec (handler by opcode)
(define object-decoders-vec (make-vector 1000))

;; vector of object-id => ref into wl-handler-vec (handler by opcode)
(define object-handlers-vec (make-vector 1000))

;; vector of objec-id => user-defined value
(define object-value-vec (make-vector 1000))

;; set-event-handler 'wl_displaly 'get_registry proc => prev-proc
(define (set-event-handler interface event proc)
  (let* ((if-indx (assq-ref wayland-index-dict interface))
         (opcode (assq-ref (vector-ref wayland-opcode-dict-vec if-indx) event))
         (if-handlers (vector-ref wl-handler-vec-vec if-indx))
         (evt-handler (vector-ref if-handlers opcode)))
    (vector-set! if-handlers opcode proc)
    evt-handler))

(define (dispatch obj-id opcode bv ix cm)
  (let* ((decoder (vector-ref (vector-ref object-decoders-vec obj-id) opcode))
         (handler (vector-ref (vector-ref object-handlers-vec obj-id) opcode)))
    (call-with-values
        (lambda () (decoder obj-id bv ix cm))
      handler)))

(define done-cond #f)
(define rq-chan #f)                     ; channel for issuing requests

(define null-id 0)
(define display-id 1)
(define registry-id 2)

(define wl-sock #f)
(define rq-iobuf #f)
(define ev-iobuf #f)

(define (old-get-registry)
  ;; request: wl_display:get_registry 2
  (call-with-values
      (lambda () (encode-wl_display:get_registry 1 rq-iobuf 0 2))
    (lambda (ln cm)
      (sendmsg wl-sock rq-iobuf 0 ln cm))))
  
(define (new-get-registry)
  (put-message rq-chan
    (lambda () (encode-wl_display:get_registry 1 rq-iobuf 0 2))))
  
;; wl_display:error
(define (handle-error obj-id code message)
  (sf "error: ~S\n" message))

;; wl_display:delete_id
(define (handle-delete_id obj-id id)
  (sf "delete-id: ~S\n" id))

(define (handle-global obj-id name interface version)
  ;; uint string uint
  (let* ((my-id (obj-count++))
         (my-sy (string->symbol interface)))
    (hashq-set! object-dict my-sy my-id)
    (sf "bind: ~A\t~A (~A)\n" my-sy my-id name)
    (put-message rq-chan
      (lambda ()
        (encode-wl_registry:bind registry-id rq-iobuf 0 name my-id)))))

;; TODO
;;   add a layer somehow to callers don't need to pass rq-iobuf 0
;;   need a way to blcok the sender until a number of messages have
;;   built up

;; =============================================================================

(define socket-path
  (let ((dir (getenv "XDG_RUNTIME_DIR"))
	(dpy (getenv "WAYLAND_DISPLAY")))
    (and dir dpy (string-append dir "/" dpy))))

(define (connect-display)
  (let* ((path socket-path)
         (style (logior SOCK_STREAM SOCK_CLOEXEC))
         (sock (socket PF_UNIX style 0))
         (conn (connect sock AF_UNIX path))
         (iobuf (make-bytevector 72)))
    (setvbuf sock 'none)
    (fcntl sock F_SETFL (logior O_NONBLOCK (fcntl sock F_GETFL)))
    (set! rq-iobuf (make-bytevector 1024))
    (set! ev-iobuf (make-bytevector 1024))
    sock))

(define (install-handlers)
  (set-event-handler 'wl_display 'error handle-error)
  (set-event-handler 'wl_display 'delete_id handle-delete_id)
  (set-event-handler 'wl_registry 'global handle-global)
  
  ;; display
  (set! display-id 1)
  (let* ((ob-indx display-id)
         (if-indx (assq-ref wayland-index-dict 'wl_display))
         (if-decoders (vector-ref wl-decoder-vec-vec if-indx))
         (if-handlers (vector-ref wl-handler-vec-vec if-indx)))
    (vector-set! object-decoders-vec ob-indx if-decoders)
    (vector-set! object-handlers-vec ob-indx if-handlers))

  ;; registry object
  (set! registry-id 2)
  (let* ((ob-indx registry-id)
         (if-indx (assq-ref wayland-index-dict 'wl_registry))
         (if-decoders (vector-ref wl-decoder-vec-vec if-indx))
         (if-handlers (vector-ref wl-handler-vec-vec if-indx)))
    (vector-set! object-decoders-vec ob-indx if-decoders)
    (vector-set! object-handlers-vec ob-indx if-handlers))
  
  (*obj-count* 3))

(define (sender)
  (let loop ((n-sent 0) (n-left 0) (cm #f) (rqq '()))
    (cond
     ((positive? n-left)
      (let ((n (sendmsg wl-sock rq-iobuf n-sent n-left cm)))
        (if (= n n-left)
            (loop 0 0 #f rqq)
            (loop (+ n-sent n) (- n-left n) #f rqq))))
     ((pair? rqq)
      (call-with-values (car rqq) 
        (lambda (ln cm)
          (loop 0 ln cm (cdr rqq)))))
     ((get-message rq-chan) =>
      (lambda (req)
        (loop n-sent n-left cm (cons req rqq))))
     (else
      (sferr "error\n")))))

(define (receiver)
  (let loop ((n-have 0) (object-id #f) (msg-size 8) (opcode #f) (control #f))
    (cond
     ((< n-have msg-size)
      (let* ((res (recvmsg! wl-sock ev-iobuf n-have))
             (n-read (vector-ref res 0))
             (control (or control (vector-ref res 1)))
             (flags (vector-ref res 2)))
        (if (zero? n-read) (yield-current-task))
        (loop (+ n-have n-read) object-id msg-size opcode control)))
     ((not object-id)
      (let* ((object-id (bytevector-u32-native-ref ev-iobuf 0))
             (word1 (bytevector-u32-native-ref ev-iobuf 4))
             (msg-size (bytevector-u16-native-ref ev-iobuf msg-size-offset))
             (opcode (bytevector-u16-native-ref ev-iobuf opcode-offset)))
        (loop n-have object-id msg-size opcode control)))
     (else
      (dispatch object-id opcode ev-iobuf 8 control)
      (if (> n-have msg-size)
          (bytevector-copy! ev-iobuf msg-size ev-iobuf 0 (- n-have msg-size)))
      (loop (- n-have msg-size) #f 8 opcode control)))))

(define (done) (and done-cond (signal-condition! done-cond)))

(define mn-sock #f)

(define (setup-monitor)
  (let ((sock (make-tcp-server-socket)))
    (setvbuf sock 'none)
    (fcntl sock F_SETFL (logior O_NONBLOCK (fcntl sock F_GETFL)))
    (add-hook! before-read-hook (lambda () (fsleep 0)))
    sock))

(define (monitor)
  (run-server mn-sock))

(run-fibers
 (lambda ()
   (set! done-cond (make-condition))
   (set! rq-chan (make-channel))
   (set! wl-sock (connect-display))
   (set! mn-sock (setup-monitor))
   (install-handlers)
   ;;
   (spawn-fiber sender)
   (fsleep 1)
   (schedule-task-when-fd-readable
    (current-scheduler) (port->fdes wl-sock) receiver)
   #|
   |#
   (new-get-registry)
   #;(schedule-task-when-fd-readable
      (current-scheduler) (port->fdes mn-sock) monitor)
   ;;
   (fsleep 30)
   (wait done-cond)
   (close-port wl-sock))
 #:hz 0
 #:install-suspendable-ports? #f)

;; --- last line ---
#|
global: 1	wl_compositor
global: 2	wl_drm
global: 3	wl_shm
global: 4	wl_output
global: 5	zxdg_output_manager_v1
global: 6	wl_data_device_manager
global: 7	zwp_primary_selection_device_manager_v1
global: 8	gtk_primary_selection_device_manager
global: 9	wl_subcompositor
global: 10	xdg_wm_base
global: 11	zxdg_shell_v6
global: 12	gtk_shell1
global: 13	wp_viewporter
global: 14	zwp_pointer_gestures_v1
global: 15	zwp_tablet_manager_v2
global: 16	wl_seat
global: 17	zwp_relative_pointer_manager_v1
global: 18	zwp_pointer_constraints_v1
global: 19	zxdg_exporter_v1
global: 20	zxdg_importer_v1
global: 21	zwp_linux_dmabuf_v1
global: 22	zwp_keyboard_shortcuts_inhibit_manager_v1
global: 23	zwp_text_input_manager_v3
global: 24	wp_presentation
global: 25	xdg_activation_v1
|#
