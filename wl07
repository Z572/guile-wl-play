#!/bin/bash
# -*- scheme -*-
# wl07 - roll in fibers ???

LD_LIBRARY_PATH=`pwd`:$LD_LIBRARY_PATH
export LD_LIBRARY_PATH

GUILE_LOAD_PATH=`pwd`:$GUILE_LOAD_PATH
export GUILE_LOAD_PATH

#exec gdb --args guile $0
exec guile $0
!#

(use-modules (rnrs bytevectors))
(use-modules (system foreign))
(use-modules (ice-9 atomic))

(use-modules (wl-client))
(use-modules (sockmsg))

(use-modules (ice-9 pretty-print))
(define (sf fmt . args) (apply simple-format #t fmt args))
(define pp pretty-print)

(define (sferr fmt . args) (apply simple-format (current-error-port) fmt args))
(define (pperr exp) (pretty-print exp (current-error-port)))

;; ============================================================================

(define sys-sleep sleep)

(use-modules ((fibers) #:renamer (lambda (s) (if (eq? s 'sleep) 'fsleep s))))
(use-modules (fibers scheduler))
(use-modules (fibers conditions))
(use-modules (fibers channels))

;;(use-modules (ice-9 readline))
;;(use-modules (ice-9 top-repl))
(use-modules (system repl server))
(use-modules (system repl coop-server))

(define (make-counter init)
  (let ((box (make-atomic-box init)))
    (case-lambda
      (() (let loop ((exp (atomic-box-ref box)))
            (let* ((cur (atomic-box-compare-and-swap! box exp (1+ exp))))
              (if (eq? cur exp) cur (loop (atomic-box-ref box))))))
      ((val) (atomic-box-set! box val)))))

;; ============================================================================

;; per-interface vectors of handlers by opcode
(define wl-handler-vec-vec (make-wl-handler-vec-vec))

;; number of objects 
;;(define *obj-count* (make-parameter 0))
(define *obj-count* (make-counter 0))
(define (obj-count++) (*obj-count*))

;; name -> id
(define object-dict (make-hash-table 97))

;; vector of object-id => ref into wl-handler-vec (handler by opcode)
(define object-decoders-vec (make-vector 1000))

;; vector of object-id => ref into wl-handler-vec (handler by opcode)
(define object-handlers-vec (make-vector 1000))

;; vector of objec-id => user-defined value
(define object-value-vec (make-vector 1000))

;; set-event-handler 'wl_displaly 'get_registry proc => prev-proc
(define (set-event-handler interface event proc)
  (let* ((if-indx (assq-ref wayland-index-dict interface))
         (opcode (assq-ref (vector-ref wayland-opcode-dict-vec if-indx) event))
         (if-handlers (vector-ref wl-handler-vec-vec if-indx))
         (evt-handler (vector-ref if-handlers opcode)))
    (vector-set! if-handlers opcode proc)
    evt-handler))

(define (dispatch obj-id opcode bv ix cm)
  (let* ((dec-vec (vector-ref object-decoders-vec obj-id))
         (decoder (and (vector-ref dec-vec opcode)))
         (hlr-vec (vector-ref object-handlers-vec obj-id))
         (handler (and (vector-ref hlr-vec opcode))))
    (if (and decoder handler)
        (call-with-values
            (lambda () (decoder obj-id bv ix cm))
          handler)
        (sf "obj-id=~S opcode=~S dec-vec?=~S decoder?=~S hlr-vec?=~S handler?=~S\n"
            obj-id opcode
            (and dec-vec #t) (and decoder #t) (and hlr-vec #t) (and handler #t)))))

(define done-cond #f)
(define rq-chan #f)                     ; channel for issuing requests

(define null-id 0)
(define display-id 1)
(define registry-id 2)
(define registry (make-hash-table))
(define shm-pool-id 3)
(define shm-id 4)

(define wl-sock #f)
(define rq-iobuf #f)
(define ev-iobuf #f)
(define io-tok #f)

(define (old-get-registry)
  (sferr "old-get-registry called\n")
  ;; request: wl_display:get_registry 2
  (call-with-values
      (lambda () (encode-wl_display:get_registry 1 rq-iobuf 0 2))
    (lambda (ln cm) (sendmsg wl-sock rq-iobuf 0 ln cm))))
  
(define (new-get-registry)
  (sferr "new-get-registry called\n")
  (put-message rq-chan
    (lambda () (encode-wl_display:get_registry 1 rq-iobuf 0 2))))

;; --- wl_display

;; wl_display:error
(define (handle-wl_display:error obj-id object_id code message)
  (sferr "display-error: id=~S code=~S msg=~S\n" object_id code message))

;; wl_display:delete_id
(define (handle-wl_display:delete_id obj-id id)
  (sf "delete-id: ~S\n" id))

;; --- wl_registry

(define (handle-wl_registry:global obj-id name interface version)
  ;; uint string uint
  (sferr "global: name=~S interface=~S version=~S\n" name interface version)
  ;;(sferr " ~A\n" (fmtbv/x ev-iobuf 0 32 4))
  ;;(sf "  => bind: ~A\t~A (~A)\n" my-sy my-id name)
  (hash-set! registry interface (vector name interface version)))

(define (wl-bind interface)
  (sferr "bind ~S\n" interface)
  (let* ((info (hash-ref registry interface))
         (name (vector-ref info 0))
         (version (vector-ref info 2))
         (my-id (obj-count++))
         (my-sy (string->symbol interface)))
    (sferr "  name=~S version=~S my-id=~S\n" name version my-id)
    (hashq-set! object-dict my-sy my-id)
    (set-object-handler my-id my-sy)
    (put-message rq-chan
      (lambda ()
        (encode-wl_registry:bind
         registry-id rq-iobuf 0 name interface version my-id)))))

;; TODO
;;   add a layer somehow to callers don't need to pass rq-iobuf 0
;;   need a way to block the sender until a number of messages have
;;   built up

;; --- wl_shm_pool

(define (wl_shm_pool:create_buffer id offset width height stride format)
  (put-message rq-chan
    (lambda ()
      (encode-wl_shm_pool:create_buffer
       id rq-iobuf 0 id offset width height stride format))))

;; wl_shm_pool::destroy
;; wl_shm_pool::resize

;; --- wl_shm

;; argb8888 = 0
;; xrgb8888 = 1

(define shm-poll-id #f)

(define (wl_shm:create_pool id fd size)
  (put-message rq-chan
    (lambda ()
      (encode-wl_shm:create_pool id rq-iobuf 0 id fd size))))

;; informs of allowed formats
(define formats '())

(define (handle-wl_shm:format format)
  ;; format is uint enum format
  (set! formats (cons format formats)))

;; --- stuff


;; double-buffer window ARGB32 500x300 = 2*4*500x300 = 1,200,000
(define (setup-window width height) ;; => fd
  (let* ((size (* 2 4 width height))
         (port (tmpfile))
         (fd (port->fdes port)))
    (truncate-file fd size)
    (mmap 0 size (logior PROT_READ PROT_WRITE) MAP_ANONYMOUS fd)
    fd
    ;;
    (set! shm-pool-id (obj-count++))
    (wl_shm:create_pool shm-pool-id fd size)
    ))


;; =============================================================================


(define socket-path
  (let ((dir (getenv "XDG_RUNTIME_DIR"))
	(dpy (getenv "WAYLAND_DISPLAY")))
    (and dir dpy (string-append dir "/" dpy))))

(define (connect-display)
  (let* ((path socket-path)
         (style (logior SOCK_STREAM SOCK_CLOEXEC))
         (sock (socket PF_UNIX style 0))
         (conn (connect sock AF_UNIX path)))
    ;;(setvbuf sock 'none)
    (fcntl sock F_SETFL (logior O_NONBLOCK (fcntl sock F_GETFL)))
    (set! rq-iobuf (make-bytevector 1024))
    (set! ev-iobuf (make-bytevector 1024))
    sock))

(define (set-object-handler obj-id obj-name)
  (let* ((ob-indx obj-id)
         (ob-name (if (string? obj-name) (string->symbol obj-name) obj-name))
         (if-indx (assq-ref wayland-index-dict ob-name))
         (if-decoders (vector-ref wl-decoder-vec-vec if-indx))
         (if-handlers (vector-ref wl-handler-vec-vec if-indx)))
    (vector-set! object-decoders-vec ob-indx if-decoders)
    (vector-set! object-handlers-vec ob-indx if-handlers)))

(define (install-handlers)
  (set-event-handler 'wl_display 'error handle-wl_display:error)
  (set-event-handler 'wl_display 'delete_id handle-wl_display:delete_id)
  (set-event-handler 'wl_registry 'global handle-wl_registry:global)
  (set-event-handler 'wl_shm 'format handle-wl_shm:format)
  
  ;; display
  (set! display-id 1)
  #;(let* ((ob-indx display-id)
         (if-indx (assq-ref wayland-index-dict 'wl_display))
         (if-decoders (vector-ref wl-decoder-vec-vec if-indx))
         (if-handlers (vector-ref wl-handler-vec-vec if-indx)))
    (vector-set! object-decoders-vec ob-indx if-decoders)
  (vector-set! object-handlers-vec ob-indx if-handlers))
  (set-object-handler display-id 'wl_display)

  ;; registry object
  (set! registry-id 2)
  #;(let* ((ob-indx registry-id)
         (if-indx (assq-ref wayland-index-dict 'wl_registry))
         (if-decoders (vector-ref wl-decoder-vec-vec if-indx))
         (if-handlers (vector-ref wl-handler-vec-vec if-indx)))
    (vector-set! object-decoders-vec ob-indx if-decoders)
    (vector-set! object-handlers-vec ob-indx if-handlers))
  (set-object-handler registry-id 'wl_registry)
  
  (*obj-count* 3))

;; https://github.com/wingo/fibers/blob/master/fibers.scm#L61
;;(define wait-for-readable (@@ (fibers) wait-for-readable))

(define (sender)
  (sferr "sender starting ...\n")
  (let loop ((tok #t) (n-sent 0) (n-left 0) (cm #f) (rqq '()))
    (cond
     ((positive? n-left)
      ;;(sferr "send message @~S\n" n-sent)
      (if tok
          (catch 'system-error
            (lambda ()
              (let ((n (sendmsg wl-sock rq-iobuf n-sent n-left cm)))
                (sferr " ~A\n" (fmtbv/x rq-iobuf n-sent n-left 4))
                (force-output wl-sock)
                (if (= n n-left)
                    (loop #f 0 0 #f rqq)
                    (loop #t (+ n-sent n) (- n-left n) #f rqq)))
              )
            (lambda (key . args)
              (sferr "SEND ERROR\n")
              ))
          (loop tok 0 0 #f rqq))
      )
     ((pair? rqq)
      ;;(fsleep 1)
      (call-with-values (car rqq) 
        (lambda (ln cm)
          (sferr "sending msg size ~S\n" ln)
          (loop tok 0 ln cm (cdr rqq)))))
     ((get-message rq-chan) =>
      (lambda (req)
        ;;(sferr "queue message\n")
        (loop tok n-sent n-left cm (cons req rqq))))
     (else
      (sferr "error\n")))))

(define (receiver)
  (sferr "receiver starting ...\n")
  (let loop ((tok #f) (n-have 0) (object-id #f) (msg-size 8)
             (opcode #f) (control #f))
    ;;(sferr "n-have=~S  msg-size=~S\n" n-have msg-size)
    (cond
     ;;((not tok) (
     ((< n-have msg-size)
      ;;(wait-for-readable wl-sock)
      (catch 'system-error
        (lambda ()
      (let* ((res (recvmsg! wl-sock ev-iobuf n-have))
             (n-read (vector-ref res 0))
             (control (or control (vector-ref res 1)))
             (flags (vector-ref res 2)))
        ;;(sferr "recv message n-read=~S\n" n-read)
        (when (zero? n-read)
          ;;(signal-condition! clear-to-send)
          ;;(sferr "receiver yields\n")
          ;;(sferr "receiver returns\n")
          ;;(yield-current-task)
          (fsleep 0.1)
          )
        (loop tok (+ n-have n-read) object-id msg-size opcode control)))
        (lambda (key . args)
          (sferr "RECV ERROR\n")))
      )
     ((not object-id)
      ;;(sferr "receiver: not object-id\n")
      (let* ((object-id (bytevector-u32-native-ref ev-iobuf 0))
             (word1 (bytevector-u32-native-ref ev-iobuf 4))
             (msg-size (bytevector-u16-native-ref ev-iobuf msg-size-offset))
             (opcode (bytevector-u16-native-ref ev-iobuf opcode-offset)))
        (loop tok n-have object-id msg-size opcode control)))
     (else
      ;;(sferr "dispatch ~S ~S\n" object-id opcode)
      (dispatch object-id opcode ev-iobuf 8 control)
      (if (> n-have msg-size)
          (bytevector-copy! ev-iobuf msg-size ev-iobuf 0 (- n-have msg-size)))
      (loop tok (- n-have msg-size) #f 8 opcode control)))))

;; === monitor ======================

(define (done) (and done-cond (signal-condition! done-cond)))

(define (monitor)
  (let* ((server (spawn-coop-repl-server)))
    (let loop ()
      (poll-coop-repl-server server)
      (yield-current-task)
      (loop))))

;; === main =========================

(run-fibers
 (lambda ()
   (set! done-cond (make-condition))
   (set! io-tok (make-condition))
   (set! rq-chan (make-channel))
   (set! wl-sock (connect-display))
   (install-handlers)
   ;;
   (spawn-fiber sender)
   (fsleep 1)
   (spawn-fiber receiver)
   #;(schedule-task-when-fd-readable
    (current-scheduler) (port->fdes wl-sock) receiver)
   ;;(new-get-registry)
   ;;(old-get-registry)
   (fsleep 2)
   (spawn-fiber monitor)
   ;;(pp (map car (hash-map->list cons registry)))
   
   ;;(fsleep 1)
   ;;(wl-bind "wl_shm")
   (fsleep 300)
   (sf "done-cond: ~S\n" done-cond)
   ;;(pp formats)
   ;;(wait done-cond)
   (close-port wl-sock))
 ;;#:scheduler (make-scheduler #:parallelism 2)
 #:hz 0
 ;;#:parallelism 2
 #:install-suspendable-ports? #t)

;; --- last line ---
#|
global: 1	wl_compositor
global: 2	wl_drm
global: 3	wl_shm
global: 4	wl_output
global: 5	zxdg_output_manager_v1
global: 6	wl_data_device_manager
global: 7	zwp_primary_selection_device_manager_v1
global: 8	gtk_primary_selection_device_manager
global: 9	wl_subcompositor
global: 10	xdg_wm_base
global: 11	zxdg_shell_v6
global: 12	gtk_shell1
global: 13	wp_viewporter
global: 14	zwp_pointer_gestures_v1
global: 15	zwp_tablet_manager_v2
global: 16	wl_seat
global: 17	zwp_relative_pointer_manager_v1
global: 18	zwp_pointer_constraints_v1
global: 19	zxdg_exporter_v1
global: 20	zxdg_importer_v1
global: 21	zwp_linux_dmabuf_v1
global: 22	zwp_keyboard_shortcuts_inhibit_manager_v1
global: 23	zwp_text_input_manager_v3
global: 24	wp_presentation
global: 25	xdg_activation_v1
|#
